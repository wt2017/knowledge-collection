🔧 1. IIC（I²C）驱动开发
✅ 特点
双线通信：仅需 SDA（数据线）和 SCL（时钟线）。
主从结构：支持多主多从，地址唯一。
半双工通信：不能同时收发。
速率等级：标准（100kHz）、快速（400kHz）、高速（3.4MHz）。
⚠️ 注意事项
地址冲突：确保每个从设备地址唯一，避免总线冲突。
总线电容限制：总线电容不能超过 400pF，限制设备数量和线长。
时钟延展：某些从设备会拉低 SCL 以延缓通信，需适配。
仲裁机制：多主设备时需处理仲裁失败情况。
调试困难：建议使用逻辑分析仪抓取波形辅助调试。
Linux 下开发：需配置设备树（DTS），注册 i2c_client，并实现 probe() 函数。
🔌 2. SPI 驱动开发
✅ 特点
四线通信：MOSI、MISO、SCLK、CS（片选）。
全双工通信：可同时收发。
高速传输：速率可达几十 MHz，适合大数据量通信。
主从结构：一主多从，需单独片选线。
⚠️ 注意事项
片选管理：每个从设备需独立 CS 引脚，避免冲突。
时钟极性与相位：需匹配从设备的 CPOL/CPHA 模式。
DMA 支持：大数据传输建议使用 DMA，减少 CPU 占用。
信号完整性：高频下注意 PCB 布线，避免信号反射。
Linux 下开发：需注册 spi_driver，实现 probe() 和 transfer() 接口，配置设备树。
🔁 3. UART 驱动开发
✅ 特点
异步串行通信：无需时钟线，使用 TX/RX 双线。
全双工通信：可同时收发。
灵活性强：支持多种波特率、数据位、停止位、校验位。
常用于调试：如串口终端、日志输出。
⚠️ 注意事项
波特率匹配：主从设备必须设置一致，否则数据错误。
流控管理：可使用 RTS/CTS 硬件流控，避免缓冲区溢出。
缓冲区管理：合理设计环形缓冲区，防止数据丢失。
中断处理：建议使用中断方式接收数据，避免轮询浪费 CPU。
Linux 下开发：需注册 uart_driver，实现中断处理、缓冲区管理、ioctl 控制等。
📊 4. ADC 驱动开发
✅ 特点
模拟转数字：将模拟信号（如电压）转换为数字值。
分辨率：常见 8/10/12/16 位，分辨率越高精度越高。
采样率：决定每秒可采样次数，影响信号还原能力。
多通道支持：部分 ADC 支持多路复用输入。
⚠️ 注意事项
参考电压稳定：Vref 不稳定会直接影响转换精度。
采样时间设置：过短可能导致采样不准确，需根据信号源阻抗调整。
通道切换延迟：多通道采样时注意切换时间，避免数据串扰。
DMA 支持：高速采样建议使用 DMA，避免 CPU 频繁中断。
Linux 下开发：需使用 IIO 子系统，注册 iio_device，配置通道、采样率、触发方式等。
✅ 总结对比表
Table
Copy
类型	通信方式	最大速率	主从结构	调试难度	常见用途
IIC	半双工	3.4 Mbps	多主多从	中等	传感器、EEPROM
SPI	全双工	几十 Mbps	一主多从	中等	显示屏、Flash、IMU
UART	全双工	几 Mbps	点对点	简单	调试串口、GPS、蓝牙
ADC	单端输入	取决于采样率	无	较高	电压采集、传感器读取
